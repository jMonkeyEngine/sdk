/*
 *  Copyright (c) 2009-2025 jMonkeyEngine
 *  All rights reserved.
 * 
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are
 *  met:
 * 
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 *  * Neither the name of 'jMonkeyEngine' nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 *  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 *  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.jme3.gde.assetbrowser.widgets;

import com.jme3.gde.assetbrowser.dnd.AssetPreviewPopupMenu;
import com.jme3.gde.assetbrowser.dnd.AssetPreviewWidgetMouseListener;
import com.jme3.gde.core.icons.IconList;
import com.jme3.gde.core.scene.PreviewRequest;
import com.jme3.gde.core.scene.SceneListener;
import com.jme3.gde.core.scene.SceneRequest;
import com.jme3.gde.core.dnd.AssetNameHolder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Icon;

/**
 * Displays an asset as an image in the AssetBrowser and handles open action and
 * dragging (if supported)
 *
 * @author rickard
 */
public class AssetPreviewWidget extends javax.swing.JPanel implements SceneListener, AssetNameHolder, ActionListener {

    private boolean editable;
    private PreviewInteractionListener listener;

    /**
     * Creates new form AssetPreviewWidget
     */
    public AssetPreviewWidget() {
        initComponents();
    }

    public AssetPreviewWidget(final PreviewInteractionListener listener, Icon icon) {
        this(listener);
        assetPreviewLabel.setIcon(icon);
    }

    public AssetPreviewWidget(final PreviewInteractionListener listener) {
        this();
        this.listener = listener;
        final var mouseListener = new AssetPreviewWidgetMouseListener(this, listener);
        addMouseListener(mouseListener);
        addMouseMotionListener(mouseListener);
        setComponentPopupMenu(new AssetPreviewPopupMenu(this));
    }

    public void setPreviewImage(Icon icon) {
        assetPreviewLabel.setIcon(icon);
    }

    public void setPreviewName(String name) {
        assetNameLabel.setText(name);
        setToolTipText(name);
    }

    public String getPreviewName() {
        return assetNameLabel.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assetNameLabel = new javax.swing.JLabel();
        assetPreviewLabel = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(170, 180));
        setPreferredSize(new java.awt.Dimension(170, 180));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(assetNameLabel, org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetNameLabel.text")); // NOI18N
        add(assetNameLabel, java.awt.BorderLayout.SOUTH);
        assetNameLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetNameLabel.AccessibleContext.accessibleName")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(assetPreviewLabel, org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetPreviewLabel.text")); // NOI18N
        assetPreviewLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        assetPreviewLabel.setPreferredSize(new java.awt.Dimension(150, 150));
        add(assetPreviewLabel, java.awt.BorderLayout.CENTER);
        assetPreviewLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(AssetPreviewWidget.class, "AssetPreviewWidget.assetPreviewLabel.AccessibleContext.accessibleName")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

    }//GEN-LAST:event_formMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assetNameLabel;
    private javax.swing.JLabel assetPreviewLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void sceneOpened(SceneRequest request) {
    }

    @Override
    public void sceneClosed(SceneRequest request) {
    }

    @Override
    public void previewCreated(PreviewRequest request) {
        if (request.getRequester() == this) {
            java.awt.EventQueue.invokeLater(() -> {
                assetPreviewLabel.setIcon(IconList.asset);
//                    invalidate();
                revalidate();
                repaint();
//                    updateUI();
            });
        }
    }

    @Override
    public String getAssetName() {
        return assetNameLabel.getText();
    }

    public void setEditable(boolean editable) {
        this.editable = editable;
    }

    public boolean isEditable() {
        return editable;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()) {
            case "Refresh":
                listener.refreshPreview(this);
                break;
            case "Delete":
                listener.deleteAsset(this);
                break;
        }
    }

}
