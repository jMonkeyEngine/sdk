/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * SelectionPanel.java
 *
 * Created on 14.06.2010, 16:52:22
 */
package com.jme3.gde.materials.multiview.widgets;

import com.jme3.asset.AssetNotFoundException;
import com.jme3.gde.core.assets.ProjectAssetManager;
import com.jme3.gde.core.properties.TexturePropertyEditor;
import com.jme3.gde.core.properties.preview.TexturePreview;
import com.jme3.gde.materials.dnd.TextureDropTargetListener;
import com.jme3.gde.materials.dnd.TextureDropTargetListener.TextureDropTarget;
import com.jme3.gde.materials.multiview.MaterialEditorTopComponent;
import com.jme3.gde.materials.multiview.widgets.icons.Icons;
import java.awt.Component;
import java.awt.dnd.DropTarget;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * The TexturePanel is a row in the material editor representing a special
 * texture
 *
 * @author normenhansen
 */
public class TexturePanel extends MaterialPropertyWidget implements TextureDropTarget{

    private final String REPEAT = "Repeat";
    private final String FLIP = "Flip";
    private final String EMPTY = "";
    
    private TexturePropertyEditor editor;
    private ProjectAssetManager manager;
    private boolean flip = false;
    private boolean repeat = false;
    protected String textureName = null; // always enclosed with ""
    protected String extraProperties = ""; // in case the source file has extra properties on texture
    private TexturePreview texPreview;
    private final ScheduledThreadPoolExecutor exec = new ScheduledThreadPoolExecutor(1);

    /**
     * Used by tests
     */
    protected TexturePanel() {
        initComponents();
    }
    
    /**
     * Creates new form SelectionPanel
     */
    public TexturePanel(ProjectAssetManager manager) {
        this.manager = manager;
        editor = new TexturePropertyEditor(manager);
        initComponents();
        
        setDropTarget(new DropTarget(this, new TextureDropTargetListener(this)));
    }
    
    private void displayPreview() {
        if (!EMPTY.equals(textureName)) {
            exec.execute(() -> {
                try {
                    if (texPreview == null) {
                        texPreview = new TexturePreview(manager);
                    }
                    texPreview.requestPreview(extractTextureName(textureName), "", 80, 25, texturePreview, null);
                } catch (AssetNotFoundException a) {
                    Logger.getLogger(MaterialEditorTopComponent.class.getName()).log(Level.WARNING, "Could not load texture {0}", textureName);
                }
            });
        }
    }

    // visible for tests
    protected String extractTextureName(final String property) {
        final String[] textureNameComponents = property.split("\"");
        final int length = textureNameComponents.length;
        if(property.endsWith("\"") || length == 1) {
            // texture name is last in property, or it's empty
            return textureNameComponents[length - 1].trim();
        }
        // has extra properties after name, return segment second to last
        return textureNameComponents[length - 2].trim();
    }

    // visible for tests
    protected void updateFlipRepeat() {
        final List<String> segments = new ArrayList<>();
        if (flip) {
            segments.add(FLIP);
        }
        if (repeat) {
            segments.add(REPEAT);
        }
        segments.add(textureName);
        segments.add(extraProperties);
        property.setValue(String.join(" ", segments).trim());
        texturePreview.setToolTipText(property.getValue());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        texturePreview = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(32767, 45));
        setMinimumSize(new java.awt.Dimension(80, 0));
        setPreferredSize(new java.awt.Dimension(467, 45));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.jLabel1.text")); // NOI18N
        jLabel1.setMinimumSize(new java.awt.Dimension(20, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 16));

        jPanel1.setPreferredSize(new java.awt.Dimension(10, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 4, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jCheckBox1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jCheckBox1.setText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.jCheckBox1.text")); // NOI18N
        jCheckBox1.setFocusable(false);
        jCheckBox1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jCheckBox2.setText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.jCheckBox2.text")); // NOI18N
        jCheckBox2.setFocusable(false);
        jCheckBox2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jButton2.setIcon(Icons.textureRemove);
        jButton2.setText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.jButton2.text")); // NOI18N
        jButton2.setToolTipText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.jButton2.toolTipText")); // NOI18N
        jButton2.setBorder(null);
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        texturePreview.setText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.texturePreview.text")); // NOI18N
        texturePreview.setToolTipText(org.openide.util.NbBundle.getMessage(TexturePanel.class, "TexturePanel.texturePreview.toolTipText")); // NOI18N
        texturePreview.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        texturePreview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        texturePreview.setFocusable(false);
        texturePreview.setIconTextGap(0);
        texturePreview.setMaximumSize(new java.awt.Dimension(75, 25));
        texturePreview.setMinimumSize(new java.awt.Dimension(75, 25));
        texturePreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                texturePreviewMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                        .addGap(55, 55, 55)
                        .addComponent(texturePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 232, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 4, Short.MAX_VALUE)
                    .addGap(0, 231, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(texturePreview, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 34, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 19, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        textureName = "\"\"";
        texturePreview.setIcon(null);
        texturePreview.setToolTipText("");
        property.setValue("");
        fireChanged();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if (property == null) {
            return;
        }
        flip = jCheckBox1.isSelected();
        updateFlipRepeat();
        fireChanged();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        if (property == null) {
            return;
        }
        repeat = jCheckBox2.isSelected();
        updateFlipRepeat();
        fireChanged();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void texturePreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_texturePreviewMouseClicked
        // Set the current texture on the editor so the dialog initializes correctly
        if (textureName != null && !textureName.equals("\"\"")) {
            String currentTexture = extractTextureName(textureName);
            editor.setAsText(currentTexture);
        } else {
            editor.setAsText(null);
        }
        
        Component view = editor.getCustomEditor();
        view.setVisible(true);
        
        if (editor.getValue() != null) {
            // A texture was selected
            property.setValue(EMPTY); // Clear before setting new value
            textureName = "\"" + editor.getAsText() + "\"";
            displayPreview();
            updateFlipRepeat();
            fireChanged();
        } else {
            // getValue() is null - either "No Texture" was selected or dialog was cancelled
            String asText = editor.getAsText();
            if (asText == null) {
                // "No Texture" was explicitly selected (setAsText(null) was called)
                property.setValue(EMPTY);
                textureName = "\"\"";
                texturePreview.setIcon(null);
                texturePreview.setToolTipText("");
                fireChanged();
            }
            // If asText is not null, it means dialog was cancelled - do nothing to preserve original state
        }
    }//GEN-LAST:event_texturePreviewMouseClicked

    @Override
    protected void readProperty() {
        java.awt.EventQueue.invokeLater(() -> {
            String prop = property.getValue().trim();
            if (prop.contains(FLIP)) {
                flip = true;
                prop = prop.replace(FLIP, EMPTY).trim();
            }
            if (prop.contains(REPEAT)) {
                repeat = true;
                prop = prop.replace(REPEAT, EMPTY).trim();
            }
            textureName = "\"" + extractTextureName(prop) + "\"";
            extraProperties = prop.replace(textureName, "").trim();
            

            jLabel1.setText(property.getName());
            jLabel1.setToolTipText(property.getName());
            displayPreview();
            texturePreview.setToolTipText(property.getValue());
            jCheckBox1.setSelected(flip);
            jCheckBox2.setSelected(repeat);
        });
    }

    @Override
    public void cleanUp() {
        if (texPreview != null) {
            texPreview.cleanUp();
        }
        exec.shutdownNow();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel texturePreview;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setTexture(String name) {
        property.setValue("");
        java.awt.EventQueue.invokeLater(() -> {
            if(name.startsWith("\"")){
                textureName = name;
            } else {
                textureName = "\"" + name + "\"";
            }
            property.setValue(textureName);
            
            updateFlipRepeat();
            displayPreview();
            java.awt.EventQueue.invokeLater(() -> {
                fireChanged();
            });
        });
        
    }
    
    // visible for tests
    protected boolean isFlip() {
        return flip;
    }
    
    // visible for tests
    protected boolean isRepeat() {
        return repeat;
    }
}
